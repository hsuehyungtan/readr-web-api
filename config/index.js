const config = require('config')
const path = require('path')

module.exports = {
  API_PROTOCOL: config.get('API_PROTOCOL'),
  API_HOST: config.get('API_HOST'),
  API_PORT: config.get('API_PORT'),
  API_TIMEOUT: config.get('API_TIMEOUT'),
  DISPOSABLE_TOKEN_WHITE_LIST: config.get('DISPOSABLE_TOKEN_WHITE_LIST'),
  DOMAIN: config.get('DOMAIN'),
  ENDPOINT_SECURE: config.get('ENDPOINT_SECURE'),
  EMAIL_BCC: config.get('EMAIL_BCC'),
  GCP_FILE_BUCKET: config.get('GCP_FILE_BUCKET'),
  GCP_KEYFILE: path.join(process.cwd(), config.get('GCP_KEYFILE')),
  GCP_PROJECT_ID: config.get('GCP_PROJECT_ID'),
  GCP_PUBSUB_TOPIC_NAME: config.get('GCP_PUBSUB_TOPIC_NAME'),
  GCS_IMG_MEMBER_PATH: config.get('GCS_IMG_MEMBER_PATH'),
  GCS_IMG_POST_PATH: config.get('GCS_IMG_POST_PATH'),
  GCP_STACKDRIVER_LOG_NAME: config.get('GCP_STACKDRIVER_LOG_NAME'),
  GOOGLE_API_KEY: config.get('GOOGLE_API_KEY'),
  GOOGLE_CLIENT_ID: config.get('GOOGLE_CLIENT_ID'),
  GOOGLE_CLIENT_SECRET: config.get('GOOGLE_CLIENT_SECRET'),
  GOOGLE_RECAPTCHA_SITE_KEY: config.get('GOOGLE_RECAPTCHA_SITE_KEY'),
  GOOGLE_RECAPTCHA_SECRET: config.get('GOOGLE_RECAPTCHA_SECRET'),
  /**
   * JWT SETTING SHOULD BE THE SAME AS TALK SERVER
   */
  JWT_SECRET: config.get('JWT_SECRET'),
  JWT_SECRETS: config.get('JWT_SECRETS'),
  JWT_COOKIE_NAME: config.get('JWT_COOKIE_NAME'),
  JWT_SIGNING_COOKIE_NAME: config.get('JWT_SIGNING_COOKIE_NAME'),
  JWT_COOKIE_NAMES: config.get('JWT_COOKIE_NAMES'),
  JWT_CLEAR_COOKIE_LOGOUT: config.get('JWT_CLEAR_COOKIE_LOGOUT'),
  JWT_DISABLE_AUDIENCE: config.get('JWT_DISABLE_AUDIENCE'),
  JWT_AUDIENCE: config.get('JWT_AUDIENCE'),
  JWT_DISABLE_ISSUER: config.get('JWT_DISABLE_ISSUER'),
  JWT_USER_ID_CLAIM: config.get('JWT_USER_ID_CLAIM'),
  JWT_ISSUER: config.get('JWT_ISSUER'),
  JWT_EXPIRY: config.get('JWT_EXPIRY'),
  JWT_ALG: config.get('JWT_ALG'),
  TALK_DB: config.get('TALK_DB'),
  TALK_SERVER: config.get('TALK_SERVER'),
  TALK_SERVER_PROTOCOL: config.get('TALK_SERVER_PROTOCOL'),
  TALK_SERVER_HOST: config.get('TALK_SERVER_HOST'),
  TALK_SERVER_PORT: config.get('TALK_SERVER_PORT'),

  IMAGE_UPLOAD_QUALITY_JPEG: config.get('IMAGE_UPLOAD_QUALITY_JPEG'),
  IMAGE_UPLOAD_QUALITY_PNG: config.get('IMAGE_UPLOAD_QUALITY_PNG'),
  MEMO_PUBLISH_STATUS: config.get('MEMO_PUBLISH_STATUS'),
  PAGE_CACHE_EXCLUDING: config.get('PAGE_CACHE_EXCLUDING'),
  POINT_OBJECT_TYPE: config.get('POINT_OBJECT_TYPE'),
  POST_PUBLISH_STATUS: config.get('POST_PUBLISH_STATUS'),
  POST_TYPE: config.get('POST_TYPE'),
  PROJECT_STATUS: config.get('PROJECT_STATUS'),
  PROJECT_PUBLISH_STATUS: config.get('PROJECT_PUBLISH_STATUS'),
  REDIS_CONNECTION_TIMEOUT: 2000,
  REDIS_HOST: config.get('REDIS_HOST'),
  REDIS_PORT: config.get('REDIS_PORT'),
  REDIS_AUTH: config.get('REDIS_AUTH'),
  REDIS_MAX_CLIENT: config.get('REDIS_MAX_CLIENT'),
  REDIS_READ_HOST: config.get('REDIS_READ_HOST'),
  REDIS_READ_PORT: config.get('REDIS_READ_PORT'),
  REDIS_WRITE_HOST: config.get('REDIS_WRITE_HOST'),
  REDIS_WRITE_PORT: config.get('REDIS_WRITE_PORT'),
  REDIS_TIMEOUT: config.get('REDIS_TIMEOUT'),
  REPORT_PUBLISH_STATUS: config.get('REPORT_PUBLISH_STATUS'),
  ROLE_MAP: config.get('ROLE_MAP'),
  SCOPES: config.get('SCOPES'),
  SEARCH_PROTOCOL: config.get('SEARCH_PROTOCOL'),
  SEARCH_HOST: config.get('SEARCH_HOST'),
  SEARCH_ENDPOINT: config.get('SEARCH_ENDPOINT'),
  SEARCH_API_KEY: config.get('SEARCH_API_KEY'),
  SEARCH_API_APPID: config.get('SEARCH_API_APPID'),
  SEARCH_API_TIMEOUT: config.get('SEARCH_API_TIMEOUT'),
  SECRET_KEY: config.get('SECRET_KEY'),
  SERVER_PROTOCOL: config.get('SERVER_PROTOCOL'),
  SERVER_HOST: config.get('SERVER_HOST'),
  SERVER_PROTOCOL_MOBILE: config.get('SERVER_PROTOCOL_MOBILE'),
  SERVER_HOST_MOBILE: config.get('SERVER_HOST_MOBILE'),
  TAG_ACTIVE: config.get('TAG_ACTIVE'),
}